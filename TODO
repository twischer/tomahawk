- Lieblingslieder mit als playlist anbieten

- Headless: playlists automatisch nach start laden
	zur zeit muss home link gedrückt werden


- Tomahawk Lied autoamtisch überspringen falls lokal nicht vorhanden
france gall - ella, ella la 


- bei control über webinterface, redirect nacha usführung ohne argumente
- damit vermeiden, das ein reload der seite den player pausiert


- Lieder die per drag and drop in der queue verschoben werden werden gelöscht
- Verschieben im Party mode ganz verhindern und im normal wieder fuktionsfähig machen


SongCaching
- Lieder die von Resolvern gespielt wurden lokal speichern um Bandbreite zu verringern
vllt MediaOutput::setCurrentSource(const Phonon::MediaSource& source) gibt es bei source ein save oder so
ansonsten parallel das io device von AudioEngine::performLoadTrack( const Tomahawk::result_ptr& result, QSharedPointer< QIODevice >& io, const bool doCrossfading ) lesen
wenn externer resolver und nicht im lokalen netzwerk
- von IODevice erben und bei jeden read vom audio backend, daten auch in Datei schrieben
- In Datei tomahawk url speichern
- vor öffnen der online quelle überprüfen, ob datei mit entsprechendem tomahawk url schon vorhanden und dann diese anstelle der onlinequelle für read verwenden

Servent::registerIODeviceFactory( const QString &proto,
                                  IODeviceFactoryFunc fac )
registriert neue resolver die die io devices erstellen



QtScriptResolverHelper::returnStreamUrl( const QString& streamUrl, boost::function< void( QSharedPointer< QIODevice >& ) > callback )
erzeugt wohl die io devices für javascript resolver



- Playlisten auch ohne premium mit spotify synchroniseren
- mit hilfe von web api https://developer.spotify.com/web-api/add-tracks-to-playlist/




- Minimales timeout zwischen gespielten liedern
- hauptsächlich bei übergang von queue mode in shuffel (wird manchmal gleihes lied gewählt)
- also eigentlich min timeout nur bei shuffel bzw shuffel erweitern, dass nur jedes lied einmal und dann ganz von vorn beginnen
- und in shuffel auch die queue gesüpielten lieder markieren


- Db aktualisierin aus web interface ermöglichen
- status des aktuallisieren auf der home seite anzeigen
- home seite autoamtisch neu laden
- Nützlich für Tablet, wenn im betrieb usb-sticks gewechselt werden


- Bei Next in Web interface noch mal mit java script fragen ob wirklich skippen


- Headless compile ohne gui abhängigkeiten
- gucken ob neuere versionen da besser sind ansonsten
- mit präprzessor auskomentieren


- Tomahawk vernümpfig im Headless beenden können
- zB Ctrl-C abfangen oder bei kill vernümpfig herunterfahren


- Datei-Upload ermöglichen um lieder vom eigenen Smarthphone sich wünschen zu können

- Analysieren, welche Methode am meisten Zeit beansprucht
- Diese versuchen zu optimieren



- Balken zum spulen hat nicht immer richtige länge, aber restdauer wird anscheinend richtig angezeigt (mit gstreamer anscheinend schon)



- Beim verlassen des Party modes player maximieren und nicht minimieren
